import random
import sys
suits = 'CDHS'
ranks = '23456789TJQKA'
real_ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13,
              'A': 14}
point = {'High card' : 0, 'One pair' : 1, 'Two pair' : 2, 'Three of a kind' : 3, 'Straight' : 4, 'Flush' : 5,
                "Full house" : 6, "Four of a kind" : 7, "Straight flush" : 8}
from abc import ABCMeta, abstractmethod
class Card(metaclass=ABCMeta):
    """Abstact class for playing cards
    """
    def __init__(self, rank_suit):
        if rank_suit[0] not in ranks or rank_suit[1] not in suits:
            raise ValueError(f'{rank_suit}: illegal card')
        self.card = rank_suit
    def __repr__(self):
        return self.card
    @abstractmethod
    def value(self):
        """Subclasses should implement this method
        """
        raise NotImplementedError("value method not implemented")
    # card comparison operators
    def __gt__(self, other): return self.value() > other.value()
    def __ge__(self, other): return self.value() >= other.value()
    def __lt__(self, other): return self.value() < other.value()
    def __le__(self, other): return self.value() <= other.value()
    def __eq__(self, other): return self.value() == other.value()
    def __ne__(self, other): return self.value() != other.value()

class PKCard(Card):
    """Card for Poker game
    """
    pass
    def value(self):
        values = dict(zip(ranks, range(2, 2 + len(ranks))))
        return values[self.card[0]]

    def __getitem__(self, index):
        return self.card[index]

class Deck:
    def __init__(self, cls):
        """Create a deck of 'cls' card class
        """
        self.deck = []
        for i in range(1):
            for suit in suits:
                for rank in ranks:
                    card = cls(rank + suit)
                    self.deck.append(card)
    def __str__(self):
        return "{0}".format(self.deck)
    def shuffle(self):
        return random.shuffle(self.deck)
    def pop(self):
        return self.deck.pop()
    def __len__(self):
        return len(self.deck)
    def __getitem__(self, index):
        return self.deck[index]

class Hands:
    def __init__(self, cards):
        if len(cards) != 5:
            raise ValueError('not 5 cards')
        self.cards = sorted(cards, reverse=True)

    def check_all_hands(self):
        if self.straight_flush(self.cards) is not None:
            return self.straight_flush(self.cards)
        if self.four_kind(self.cards) is not None:
            return self.four_kind(self.cards)
        if self.full_house(self.cards) is not None:
            return self.full_house(self.cards)
        if self.flush(self.cards) is not None:
            return self.flush(self.cards)
        if self.straight(self.cards) is not None:
            return self.straight(self.cards)
        if self.three_of_kind(self.cards) is not None:
            return self.three_of_kind(self.cards)
        if self.two_pair(self.cards) is not None:
            return self.two_pair(self.cards)
        if self.one_pair(self.cards) is not None:
            return self.one_pair(self.cards)
        if self.high_card(self.cards) is not None:
            return self.high_card(self.cards)

    def straight_flush(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        for i in range(len(cards) - 1):
            if cards[i][1] != cards[i + 1][1]:
                return None
        for i in range(len(cards) - 1):
            if real_ranks[cards[i][0]] != real_ranks[cards[i + 1][0]] + 1:
                return None
        return ['Straight flush', rank_list]

    def flush(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        for i in range(len(cards) - 1):
            if cards[i][1] != cards[i + 1][1]:
                return None
        return ['Flush', rank_list]

    def straight(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        for i in range(len(cards) - 1):
            if real_ranks[cards[i][0]] != real_ranks[cards[i + 1][0]] + 1:
                return None
        return ['Straight', rank_list]

    def four_kind(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append(card[0])
        if list[0] == list[1]:
            del list[-1]
        else:
            del list[0]
        if len(set(list)) != 1:
            return None
        return ['Four of a kind', rank_list]

    def full_house(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append(real_ranks[card[0]])
        if list[1] != list[2]:
            a = list[:2]
            b = list[2:]
        else:
            b = list[:3]
            a = list[3:]
        if len(set(a)) != 1 or len(set(b)) != 1:
            return None
        return ['Full house', rank_list]

    def three_of_kind(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append((real_ranks[card[0]]))
        set_list = set(list)
        result = []
        for i in set_list:
            list_count = 0
            for j in list:
                if j == i:
                    list_count = list_count + 1
            result.append(list_count)
        if len(result) == 3:
            if result[0] == 3 or result[1] == 3 or result[2] == 3:
                return ['Three of a kind', rank_list]
            else:
                return None
        else:
            return None

    def two_pair(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append(real_ranks[card[0]])
        pair = []
        for i in range(len(list) - 1):
            if list[i] == list[i + 1]:
                pair.append(list[i])
        if len(set(pair)) == 2:
            return ['Two pair', rank_list]
        else:
            return None

    def one_pair(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        rank = set()
        for card in cards:
            rank.add(real_ranks[card[0]])
        if len(rank) != 4:
            return None
        return ['One pair', rank_list]

    def high_card(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        return ['High card', rank_list]

    def tie_break(self, other):
        A_hand_ranking = self.check_all_hands()
        B_hand_ranking = other.check_all_hands()
        if(point[A_hand_ranking[0]] > point[B_hand_ranking[0]]):
            return True
        elif(point[A_hand_ranking[0]] < point[B_hand_ranking[0]]):
            return False
        else:
            if(point[A_hand_ranking[0]] == 0): #High card
                for i in range(5):
                    if(A_hand_ranking[1][i]>B_hand_ranking[1][i]):
                        return True
                    elif(A_hand_ranking[1][i]<B_hand_ranking[1][i]):
                        return False
            elif(point[A_hand_ranking[0]] == 1):#One pair
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 2):
                        A_ranklist.insert(0, A_temp[i])
                        i += 2
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 2):
                        B_ranklist.insert(0, B_temp[i])
                        i += 2
                for i in range(5):
                    if(A_ranklist[i]>B_ranklist[i]):
                        return True
                    elif(A_ranklist[i]<B_ranklist[i]):
                        return False

            elif(point[A_hand_ranking[0]] == 2):#tTwo pair
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 2):
                        A_ranklist.insert(0, A_temp[i])
                        i += 2
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 2):
                        B_ranklist.insert(0, B_temp[i])
                        i += 2
                if(A_ranklist[1]>B_ranklist[1]):
                    return True
                elif(A_ranklist[1]<B_ranklist[1]):
                    return False
                elif (A_ranklist[1] == B_ranklist[1]):
                    if (A_ranklist[0] > B_ranklist[0]):
                        return True
                    elif (A_ranklist[0] < B_ranklist[0]):
                        return False
                    elif (A_ranklist[0] == B_ranklist[0]):
                        if (A_ranklist[2] > B_ranklist[2]):
                            return True
                        elif (A_ranklist[2] < B_ranklist[2]):
                            return False

            elif(point[A_hand_ranking[0]] == 3):#Three of kind
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 3):
                        A_ranklist.insert(0, A_temp[i])
                        i += 3
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 3):
                        B_ranklist.insert(0, B_temp[i])
                        i += 3
                if (A_ranklist[0] > B_ranklist[0]):
                    return True
                elif (A_ranklist[0] < B_ranklist[0]):
                    return False
                elif (A_ranklist[0] == B_ranklist[0]):
                    if (A_ranklist[1] > B_ranklist[1]):
                        return True
                    elif (A_ranklist[1] < B_ranklist[1]):
                        return False
                    elif (A_ranklist[1] == B_ranklist[1]):
                        if (A_ranklist[2] > B_ranklist[2]):
                            return True
                        elif (A_ranklist[2] < B_ranklist[2]):
                            return False

            elif (point[A_hand_ranking[0]] == 6): #Full house
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 2):
                        A_ranklist.append(A_temp[i])
                        i += 2
                    elif (A_temp.count(A_temp[i]) == 3):
                        A_ranklist.insert(0, A_temp[i])
                        i += 3
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 2):
                        B_ranklist.append(B_temp[i])
                        i += 2
                    elif (B_temp.count(B_temp[i]) == 3):
                        B_ranklist.insert(0, B_temp[i])
                        i += 3
                if (A_ranklist[0] > B_ranklist[0]):
                    return True
                elif (A_ranklist[0] < B_ranklist[0]):
                    return False
                elif (A_ranklist[0] == B_ranklist[0]):
                    if (A_ranklist[1] > B_ranklist[1]):
                        return True
                    elif (A_ranklist[1] < B_ranklist[1]):
                        return False

            elif (point[A_hand_ranking[0]] == 7): #Full house
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 4):
                        A_ranklist.insert(0, A_temp[i])
                        i += 4
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 4):
                        B_ranklist.insert(0, B_temp[i])
                        i += 4
                if (A_ranklist[0] > B_ranklist[0]):
                    return True
                elif (A_ranklist[0] < B_ranklist[0]):
                    return False
                elif (A_ranklist[0] == B_ranklist[0]):
                    if (A_ranklist[1] > B_ranklist[1]):
                        return True
                    elif (A_ranklist[1] < B_ranklist[1]):
                        return False

            elif (point[A_hand_ranking[0]] == 4): #Straight
                if(A_hand_ranking[1][0]>B_hand_ranking[1][0]):
                    return True
                elif(A_hand_ranking[1][0]<B_hand_ranking[1][0]):
                    return False

            elif (point[A_hand_ranking[0]] == 5): #Flush
                for i in range(5):
                    if(A_hand_ranking[1][i]>B_hand_ranking[1][i]):
                        return True
                    elif(A_hand_ranking[1][i]<B_hand_ranking[1][i]):
                        return False

            elif (point[A_hand_ranking[0]] == 8): #Straight Flush
                for i in range(5):
                    if(A_hand_ranking[1][i]>B_hand_ranking[1][i]):
                        return True
                    elif(A_hand_ranking[1][i]<B_hand_ranking[1][i]):
                        return False

if __name__ == '__main__':
    def test(did_pass):
        """  Print the result of a test.  """
        linenum = sys._getframe(1).f_lineno  # Get the caller's line number.
        if did_pass:
            msg = "Test at line {0} ok.".format(linenum)
        else:
            msg = ("Test at line {0} FAILED.".format(linenum))
        print(msg)

    #NOT IN TIE CASE

    #1 A=one pair B=two pair
    A_hand = [PKCard('3D'), PKCard('7S'), PKCard('3C'), PKCard('AD'), PKCard('4D')]
    B_hand = [PKCard('4D'), PKCard('AD'), PKCard('4C'), PKCard('AC'), PKCard('TD')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 2 A=high card B=three of kind
    A_hand = [PKCard('3D'), PKCard('7S'), PKCard('KC'), PKCard('AD'), PKCard('4D')]
    B_hand = [PKCard('4H'), PKCard('6D'), PKCard('4C'), PKCard('AC'), PKCard('4D')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 3 A=straight B=one paiir
    A_hand = [PKCard('8D'), PKCard('TS'), PKCard('9C'), PKCard('JD'), PKCard('QD')]
    B_hand = [PKCard('2C'), PKCard('3H'), PKCard('4C'), PKCard('2C'), PKCard('TD')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 4 A=flush B=two pair
    A_hand = [PKCard('3S'), PKCard('TS'), PKCard('9S'), PKCard('JS'), PKCard('QS')]
    B_hand = [PKCard('2C'), PKCard('4H'), PKCard('4C'), PKCard('2D'), PKCard('TD')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 5 A=four of a kind B=straight flush
    A_hand = [PKCard('7C'), PKCard('7S'), PKCard('9S'), PKCard('7D'), PKCard('7H')]
    B_hand = [PKCard('TC'), PKCard('KC'), PKCard('JC'), PKCard('QC'), PKCard('AC')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 6 A=three of a kind B=four of a kind
    A_hand = [PKCard('3S'), PKCard('TC'), PKCard('TS'), PKCard('JS'), PKCard('TH')]
    B_hand = [PKCard('2C'), PKCard('2H'), PKCard('4C'), PKCard('2D'), PKCard('2S')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 7 A=full house B=straight
    A_hand = [PKCard('KS'), PKCard('9C'), PKCard('9S'), PKCard('KC'), PKCard('KH')]
    B_hand = [PKCard('2C'), PKCard('6H'), PKCard('3C'), PKCard('4H'), PKCard('5D')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 8 A=one pair house B=straight flush
    A_hand = [PKCard('KS'), PKCard('5C'), PKCard('3S'), PKCard('KC'), PKCard('4H')]
    B_hand = [PKCard('7C'), PKCard('9C'), PKCard('8C'), PKCard('JC'), PKCard('TC')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # IN TIE CASE

    # 9 A='9'high card B='A'high card
    A_hand = [PKCard('9S'), PKCard('3C'), PKCard('7S'), PKCard('KC'), PKCard('4H')]
    B_hand = [PKCard('2C'), PKCard('AH'), PKCard('4S'), PKCard('6D'), PKCard('3C')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    #10 A='7'one pair B='9'one pair
    A_hand = [PKCard('7S'), PKCard('5C'), PKCard('7D'), PKCard('3C'), PKCard('2H')]
    B_hand = [PKCard('2C'), PKCard('9H'), PKCard('4H'), PKCard('9D'), PKCard('3D')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 11 A='A9'one pair B='A7'one pair
    A_hand = [PKCard('AC'), PKCard('5C'), PKCard('AC'), PKCard('9C'), PKCard('2H')]
    B_hand = [PKCard('7C'), PKCard('AH'), PKCard('4H'), PKCard('AD'), PKCard('3D')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 12 A='J3'two pair B='J9'two pair
    A_hand = [PKCard('JC'), PKCard('3C'), PKCard('JH'), PKCard('TC'), PKCard('3H')]
    B_hand = [PKCard('9C'), PKCard('JD'), PKCard('JS'), PKCard('9D'), PKCard('2D')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 13 A='A95'two pair B='A97'two pair
    A_hand = [PKCard('AC'), PKCard('9D'), PKCard('9H'), PKCard('5C'), PKCard('AS')]
    B_hand = [PKCard('9C'), PKCard('AD'), PKCard('AH'), PKCard('9S'), PKCard('7D')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 14 A='A'three of a kind B='9'three of  a kind
    A_hand = [PKCard('AC'), PKCard('8H'), PKCard('AH'), PKCard('4C'), PKCard('AH')]
    B_hand = [PKCard('9S'), PKCard('TS'), PKCard('9D'), PKCard('8D'), PKCard('9C')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 15 A='8'straight B='7'straight
    A_hand = [PKCard('6C'), PKCard('8H'), PKCard('7H'), PKCard('5C'), PKCard('4H')]
    B_hand = [PKCard('7S'), PKCard('5S'), PKCard('6D'), PKCard('4D'), PKCard('3C')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 16 A='7'flush B='J'flush
    A_hand = [PKCard('7S'), PKCard('2S'), PKCard('4S'), PKCard('6S'), PKCard('5S')]
    B_hand = [PKCard('2C'), PKCard('JC'), PKCard('6C'), PKCard('5C'), PKCard('4C')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 17 A='T8'flush B='T6'flush
    A_hand = [PKCard('5D'), PKCard('8D'), PKCard('TD'), PKCard('3D'), PKCard('4D')]
    B_hand = [PKCard('6C'), PKCard('TC'), PKCard('3C'), PKCard('5C'), PKCard('4C')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == True)

    # 18 A='75'full house B='85'full house
    A_hand = [PKCard('7D'), PKCard('5D'), PKCard('5C'), PKCard('7H'), PKCard('7S')]
    B_hand = [PKCard('5H'), PKCard('5S'), PKCard('8H'), PKCard('8D'), PKCard('8C')]
    #A_hand.sort(key=lambda x: real_ranks[x[0]], reverse=True), B_hand.sort(key=lambda x: real_ranks[x[0]], reverse=True)
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 19 A='7'four of a kind B='Q'four of a kind
    A_hand = [PKCard('7D'), PKCard('5D'), PKCard('7C'), PKCard('7H'), PKCard('7S')]
    B_hand = [PKCard('QH'), PKCard('QS'), PKCard('8H'), PKCard('QD'), PKCard('QC')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)

    # 20 A='T'straight flush B='K'straight flush
    A_hand = [PKCard('TD'), PKCard('8D'), PKCard('9D'), PKCard('7D'), PKCard('6D')]
    B_hand = [PKCard('QH'), PKCard('KH'), PKCard('JH'), PKCard('TH'), PKCard('9H')]
    A, B = Hands(A_hand), Hands(B_hand)
    print(A.check_all_hands(), B.check_all_hands())
    test(A.tie_break(B) == False)
