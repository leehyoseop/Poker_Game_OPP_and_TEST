  
import random
import sys
from enum import IntEnum
suits = 'CDHS'
ranks = '23456789TJQKA'
real_ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13,
              'A': 14}
point = {'HIGH_CARD' : 0, 'ONE_PAIR' : 1, 'TWO_PAIRS' : 2, 'THREE_OF_A_KIND' : 3, 'STRAIGHT' : 4, 'FLUSH' : 5,
                " FULL_HOUSE " : 6, "FOUR_OF_A_KIND" : 7, "STRAIGHT_FLUSH" : 8}
from abc import ABCMeta, abstractmethod

class Card(metaclass=ABCMeta):
    """Abstact class for playing cards
    """
    def __init__(self, rank_suit):
        # rank_suit == 'rank+suit' ex) '3S'
        if rank_suit[0] not in ranks or rank_suit[1] not in suits:
            raise ValueError(f'{rank_suit}: illegal card') # pragma: no cover
        self.card = rank_suit
        self.rank = rank_suit[0]
        self.suit = rank_suit[1]
    
    def __repr__(self):
        return self.card
    @abstractmethod
    def value(self):
        """Subclasses should implement this method
        """
        raise NotImplementedError("value method not implemented") # pragma: no cover
    
    # card comparison operators
    def __gt__(self, other): return self.value() > other.value()
    def __ge__(self, other): return self.value() >= other.value()
    def __lt__(self, other): return self.value() < other.value()
    def __le__(self, other): return self.value() <= other.value()
    def __eq__(self, other): return self.value() == other.value()
    def __ne__(self, other): return self.value() != other.value()

class PKCard(Card):
    """Card for Poker game
    """
    
    pass
    def value(self):
        values = dict(zip(ranks, range(2, 2 + len(ranks))))
        return values[self.card[0]]

    def __getitem__(self, index):
        return self.card[index]

class Deck:
    def __init__(self, cls):# pragma: no cover
        """Create a deck of 'cls' card class
        """
        self.deck = []
        for i in range(1):
            for suit in suits:
                for rank in ranks:
                    card = cls(rank + suit)
                    self.deck.append(card)
    def __str__(self):# pragma: no cover
        return "{0}".format(self.deck)
    def shuffle(self):# pragma: no cover
        return random.shuffle(self.deck)
    def pop(self):# pragma: no cover
        return self.deck.pop()
    def __len__(self):# pragma: no cover
        return len(self.deck)
    def __getitem__(self, index):# pragma: no cover
        return self.deck[index]

class Ranking(IntEnum):
    HIGH_CARD = 0
    ONE_PAIR = 1
    TWO_PAIRS = 2
    THREE_OF_A_KIND = 3
    STRAIGHT = 4
    FLUSH = 5
    FULL_HOUSE = 6
    FOUR_OF_A_KIND = 7
    STRAIGHT_FLUSH = 8

class Hands:
    def __init__(self, cards):
        if len(cards) != 5:
            raise ValueError('not 5 cards') # pragma: no cover
        self.cards = sorted(cards, reverse=True)

    def check_all_hands(self):
        if self.is_straight_flush(self.cards) is not None:
            return self.is_straight_flush(self.cards)
        if self.is_four_of_a_kind(self.cards) is not None:
            return self.is_four_of_a_kind(self.cards)
        if self.is_full_house(self.cards) is not None:
            return self.is_full_house(self.cards)
        if self.is_flush(self.cards) is not None:
            return self.is_flush(self.cards)
        if self.is_straight(self.cards) is not None:
            return self.is_straight(self.cards)
        if self.is_three_of_a_kind(self.cards) is not None:
            return self.is_three_of_a_kind(self.cards)
        if self.is_two_pair(self.cards) is not None:
            return self.is_two_pair(self.cards)
        if self.is_one_pair(self.cards) is not None:
            return self.is_one_pair(self.cards)
        if self.is_high_card(self.cards) is not None:
            return self.is_high_card(self.cards)

    def is_straight_flush(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        for i in range(len(cards) - 1):
            if cards[i][1] != cards[i + 1][1]:
                return None
        for i in range(len(cards) - 1):
            if real_ranks[cards[i][0]] != real_ranks[cards[i + 1][0]] + 1:
                return None
        return ['STRAIGHT_FLUSH', rank_list]

    def is_flush(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        for i in range(len(cards) - 1):
            if cards[i][1] != cards[i + 1][1]:
                return None
        return ['FLUSH', rank_list]

    def is_straight(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        for i in range(len(cards) - 1):
            if real_ranks[cards[i][0]] != real_ranks[cards[i + 1][0]] + 1:
                return None
        return ['STRAIGHT', rank_list]

    def is_four_of_a_kind(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append(card[0])
        if list[0] == list[1]:
            del list[-1]
        else:
            del list[0]
        if len(set(list)) != 1:
            return None
        return ['FOUR_OF_A_KIND', rank_list]

    def is_full_house(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append(real_ranks[card[0]])
        if list[1] != list[2]:
            a = list[:2]
            b = list[2:]
        else:
            b = list[:3]
            a = list[3:]
        if len(set(a)) != 1 or len(set(b)) != 1:
            return None
        return ['FULL_HOUSE', rank_list]

    def is_three_of_a_kind(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append((real_ranks[card[0]]))
        set_list = set(list)
        result = []
        for i in set_list:
            list_count = 0
            for j in list:
                if j == i:
                    list_count = list_count + 1
            result.append(list_count)
        if len(result) == 3:
            if result[0] == 3 or result[1] == 3 or result[2] == 3:
                return ['THREE_OF_A_KIND', rank_list]
            else:
                return None
        else:
            return None

    def is_two_pair(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        list = []
        for card in cards:
            list.append(real_ranks[card[0]])
        pair = []
        for i in range(len(list) - 1):
            if list[i] == list[i + 1]:
                pair.append(list[i])
        if len(set(pair)) == 2:
            return ['TWO_PAIRS', rank_list]
        else:
            return None

    def is_one_pair(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        rank = set()
        for card in cards:
            rank.add(real_ranks[card[0]])
        if len(rank) != 4:
            return None
        return ['ONE_PAIR', rank_list]

    def is_high_card(self, cards):
        rank_list = []
        for i in range(len(cards)):
            rank_list.append(int(real_ranks[cards[i][0]]))
        return ['HIGH_CARD', rank_list]

    def tie_break(self, other):# pragma: no cover
        A_hand_ranking = self.check_all_hands()
        B_hand_ranking = other.check_all_hands()
        if(point[A_hand_ranking[0]] > point[B_hand_ranking[0]]):
            return True
        elif(point[A_hand_ranking[0]] < point[B_hand_ranking[0]]):
            return False
        else:
            if(point[A_hand_ranking[0]] == 0): #HIGH_CARD
                for i in range(5):
                    if(A_hand_ranking[1][i]>B_hand_ranking[1][i]):
                        return True
                    elif(A_hand_ranking[1][i]<B_hand_ranking[1][i]):
                        return False
            elif(point[A_hand_ranking[0]] == 1):#ONE_PAIR
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 2):
                        A_ranklist.insert(0, A_temp[i])
                        i += 2
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 2):
                        B_ranklist.insert(0, B_temp[i])
                        i += 2
                for i in range(5):
                    if(A_ranklist[i]>B_ranklist[i]):
                        return True
                    elif(A_ranklist[i]<B_ranklist[i]):
                        return False

            elif(point[A_hand_ranking[0]] == 2):#tTWO_PAIRS
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 2):
                        A_ranklist.insert(0, A_temp[i])
                        i += 2
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 2):
                        B_ranklist.insert(0, B_temp[i])
                        i += 2
                if(A_ranklist[1]>B_ranklist[1]):
                    return True
                elif(A_ranklist[1]<B_ranklist[1]):
                    return False
                elif (A_ranklist[1] == B_ranklist[1]):
                    if (A_ranklist[0] > B_ranklist[0]):
                        return True
                    elif (A_ranklist[0] < B_ranklist[0]):
                        return False
                    elif (A_ranklist[0] == B_ranklist[0]):
                        if (A_ranklist[2] > B_ranklist[2]):
                            return True
                        elif (A_ranklist[2] < B_ranklist[2]):
                            return False

            elif(point[A_hand_ranking[0]] == 3):#Three of kind
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 3):
                        A_ranklist.insert(0, A_temp[i])
                        i += 3
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 3):
                        B_ranklist.insert(0, B_temp[i])
                        i += 3
                if (A_ranklist[0] > B_ranklist[0]):
                    return True
                elif (A_ranklist[0] < B_ranklist[0]):
                    return False
                elif (A_ranklist[0] == B_ranklist[0]):
                    if (A_ranklist[1] > B_ranklist[1]):
                        return True
                    elif (A_ranklist[1] < B_ranklist[1]):
                        return False
                    elif (A_ranklist[1] == B_ranklist[1]):
                        if (A_ranklist[2] > B_ranklist[2]):
                            return True
                        elif (A_ranklist[2] < B_ranklist[2]):
                            return False

            elif (point[A_hand_ranking[0]] == 6): # FULL_HOUSE 
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 2):
                        A_ranklist.append(A_temp[i])
                        i += 2
                    elif (A_temp.count(A_temp[i]) == 3):
                        A_ranklist.insert(0, A_temp[i])
                        i += 3
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 2):
                        B_ranklist.append(B_temp[i])
                        i += 2
                    elif (B_temp.count(B_temp[i]) == 3):
                        B_ranklist.insert(0, B_temp[i])
                        i += 3
                if (A_ranklist[0] > B_ranklist[0]):
                    return True
                elif (A_ranklist[0] < B_ranklist[0]):
                    return False
                elif (A_ranklist[0] == B_ranklist[0]):
                    if (A_ranklist[1] > B_ranklist[1]):
                        return True
                    elif (A_ranklist[1] < B_ranklist[1]):
                        return False

            elif (point[A_hand_ranking[0]] == 7): # FULL_HOUSE 
                A_temp = A_hand_ranking[1]
                B_temp = B_hand_ranking[1]
                A_ranklist = []
                i = 0
                while (i < len(A_temp)):
                    if (A_temp.count(A_temp[i]) == 1):
                        A_ranklist.append(A_temp[i])
                        i += 1
                    elif (A_temp.count(A_temp[i]) == 4):
                        A_ranklist.insert(0, A_temp[i])
                        i += 4
                B_ranklist = []
                i = 0
                while (i < len(B_temp)):
                    if (B_temp.count(B_temp[i]) == 1):
                        B_ranklist.append(B_temp[i])
                        i += 1
                    elif (B_temp.count(B_temp[i]) == 4):
                        B_ranklist.insert(0, B_temp[i])
                        i += 4
                if (A_ranklist[0] > B_ranklist[0]):
                    return True
                elif (A_ranklist[0] < B_ranklist[0]):
                    return False
                elif (A_ranklist[0] == B_ranklist[0]):
                    if (A_ranklist[1] > B_ranklist[1]):
                        return True
                    elif (A_ranklist[1] < B_ranklist[1]):
                        return False

            elif (point[A_hand_ranking[0]] == 4): #STRAIGHT
                if(A_hand_ranking[1][0]>B_hand_ranking[1][0]):
                    return True
                elif(A_hand_ranking[1][0]<B_hand_ranking[1][0]):
                    return False

            elif (point[A_hand_ranking[0]] == 5): #FLUSH
                for i in range(5):
                    if(A_hand_ranking[1][i]>B_hand_ranking[1][i]):
                        return True
                    elif(A_hand_ranking[1][i]<B_hand_ranking[1][i]):
                        return False

            elif (point[A_hand_ranking[0]] == 8): #STRAIGHT_FLUSH
                for i in range(5):
                    if(A_hand_ranking[1][i]>B_hand_ranking[1][i]):
                        return True
                    elif(A_hand_ranking[1][i]<B_hand_ranking[1][i]):
                        return False
